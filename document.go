// Copyright 2017 Diego Bernardes. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package flare

import (
	"context"
	"fmt"
	"reflect"
	"strconv"
	"time"

	"github.com/pkg/errors"
)

// Document represents the documents from a Resource.
type Document struct {
	Id               string
	ChangeFieldValue interface{}
	Resource         Resource
	UpdatedAt        time.Time
}

// TransformRevision is used to corret the revision value. The document object can be generated by
// multiple places, during serializations and deserializations, the concrete type is lost an usually
// a string representation is held.
func (doc *Document) TransformRevision() error {
	switch doc.Resource.Change.Kind {
	case ResourceChangeDate:
		if err := doc.transformRevisionDate(); err != nil {
			return errors.Wrap(err, "error during resource change date transformation")
		}
	case ResourceChangeInteger:
		if err := doc.transformRevisionInt(); err != nil {
			return errors.Wrap(err, "error during resource change integer transformation")
		}
	case ResourceChangeString:
		if err := doc.transformRevisionString(); err != nil {
			return errors.Wrap(err, "error during resource change string transformation")
		}
	}

	return nil
}

func (doc *Document) transformRevisionDate() error {
	switch v := doc.ChangeFieldValue.(type) {
	case time.Time:
		return nil
	case string:
		value, err := time.Parse(doc.Resource.Change.DateFormat, v)
		if err != nil {
			return errors.Wrapf(
				err,
				"error during parse '%s' with format '%s'",
				v, doc.Resource.Change.DateFormat,
			)
		}
		doc.ChangeFieldValue = value
		return nil
	}

	return fmt.Errorf("invalid revision type '%s'", reflect.TypeOf(doc.validChangeFieldValue()).Name())
}

func (doc *Document) transformRevisionInt() error {
	switch v := doc.ChangeFieldValue.(type) {
	case int:
		return nil
	case string:
		value, err := strconv.ParseInt(v, 10, 64)
		if err != nil {
			return errors.Wrapf(err, "error during parse '%s' to int", v)
		}
		doc.ChangeFieldValue = value
		return nil
	}

	return fmt.Errorf("invalid revision type '%s'", reflect.TypeOf(doc.validChangeFieldValue()).Name())
}

func (doc *Document) transformRevisionString() error {
	if _, ok := doc.ChangeFieldValue.(string); ok {
		return nil
	}
	return fmt.Errorf("invalid revision type '%s'", reflect.TypeOf(doc.validChangeFieldValue()).Name())
}

// Valid indicates if the current document is valid.
func (doc *Document) Valid() error {
	if doc.Id == "" {
		return errors.New("missing Id")
	}

	if doc.ChangeFieldValue == nil {
		return errors.New("missing ChangeField")
	}

	if err := doc.Resource.Change.Valid(); err != nil {
		return errors.Wrap(err, "invalid Resource.Change")
	}

	return doc.validChangeFieldValue()
}

func (doc *Document) validChangeFieldValue() error {
	switch doc.Resource.Change.Kind {
	case ResourceChangeDate:
		if _, ok := doc.ChangeFieldValue.(time.Time); !ok {
			return errors.New("invalid ChangeFieldValue, could not cast it to time.Time")
		}
	case ResourceChangeString:
		if _, ok := doc.ChangeFieldValue.(string); !ok {
			return errors.New("invalid ChangeFieldValue, could not cast it to string")
		}
	case ResourceChangeInteger:
		if _, ok := doc.ChangeFieldValue.(int); !ok {
			return errors.New("invalid ChangeFieldValue, could not cast it to integer")
		}
	}

	return nil
}

// Newer indicates if the current document is newer then the one passed as parameter.
func (doc *Document) Newer(reference *Document) (bool, error) {
	if reference == nil {
		return true, nil
	}

	switch doc.Resource.Change.Kind {
	case ResourceChangeDate:
		return doc.newerDate(reference.ChangeFieldValue)
	case ResourceChangeInteger:
		return doc.newerInteger(reference.ChangeFieldValue)
	case ResourceChangeString:
		return doc.newerString(reference.ChangeFieldValue)
	default:
		return false, errors.New("invalid change kind")
	}
}

func (doc *Document) newerDate(rawReferenceValue interface{}) (bool, error) {
	docValue, ok := doc.ChangeFieldValue.(time.Time)
	if !ok {
		return false, errors.New("expected revision to be a time.Time")
	}

	referenceValue, ok := rawReferenceValue.(time.Time)
	if !ok {
		return false, errors.New("expected revision to be a time.Time")
	}

	return docValue.After(referenceValue), nil
}

func (doc *Document) newerInteger(rawReferenceValue interface{}) (bool, error) {
	docValue, ok := doc.ChangeFieldValue.(int)
	if !ok {
		return false, fmt.Errorf("could not cast rawDocValue '%v' to int", doc.ChangeFieldValue)
	}

	referenceValue, ok := rawReferenceValue.(int)
	if !ok {
		return false, fmt.Errorf("could not cast rawReferenceValue '%v' to int", rawReferenceValue)
	}

	return docValue > referenceValue, nil
}

func (doc *Document) newerString(rawReferenceValue interface{}) (bool, error) {
	docValue, ok := doc.ChangeFieldValue.(string)
	if !ok {
		return false, fmt.Errorf("could not cast rawDocValue(%v) to string", doc.ChangeFieldValue)
	}

	referenceValue, ok := rawReferenceValue.(string)
	if !ok {
		return false, fmt.Errorf("could not cast rawReferenceValue(%v) to string", rawReferenceValue)
	}

	return docValue > referenceValue, nil
}

// DocumentRepositorier used to interact with Document data storage.
type DocumentRepositorier interface {
	FindOne(ctx context.Context, id string) (*Document, error)
	FindOneWithRevision(ctx context.Context, id string, revision interface{}) (*Document, error)
	Update(context.Context, *Document) error
	Delete(ctx context.Context, id string) error
}

// DocumentRepositoryError implements all the errrors the repository can return.
type DocumentRepositoryError interface {
	NotFound() bool
}
